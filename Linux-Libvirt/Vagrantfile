# -*- mode: ruby -*-
# vi: set ft=ruby :

# Using vagrant-hostmanager allows for all of the configured VMs to be
# reachable by name both inside the virtual environment as well as from the
# hypervisor.  There is no DNS or other complicated machinery required to
# enable this functionality; it modifies /etc/hosts on all the configured
# machines based on the 'manage_guest' and 'manage_host' parameters.
#
# vagrant-hostmanager: https://github.com/devopsgroup-io/vagrant-hostmanager
unless Vagrant.has_plugin?("vagrant-hostmanager")
  raise "vagrant-hostmanager is not installed, please install it by running `vagrant plugin install vagrant-hostmanager`"
end

os_settings = {
  'infra'    => 40,
  'resource' => 40,
  'farms'    => [ 40, 41],
}

# Specify the total number of each OS to use for Farm machines
# Note: If there are already farms defined and/or running, then this number
# should only ever be INCREASED.  This is because reducing the count will
# result in orphaned virtual machines. (Vagrant won't "know" about them, but
# they'll still be running)
farms_count = 2

# Add the location of the boxes to use
box_urls = {
  38 => 'https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/38/Cloud/x86_64/images/Fedora-Cloud-Base-Vagrant-38-1.6.x86_64.vagrant-libvirt.box',
  39 => 'https://dl.fedoraproject.org/pub/fedora/linux/releases/39/Cloud/x86_64/images/Fedora-Cloud-Base-Vagrant-39-1.5.x86_64.vagrant-libvirt.box',
  40 => 'https://dl.fedoraproject.org/pub/fedora/linux/releases/40/Cloud/x86_64/images/Fedora-Cloud-Base-Vagrant-libvirt.x86_64-40-1.14.vagrant.libvirt.box',
  41 => 'https://dl.fedoraproject.org/pub/fedora/linux/releases/41/Cloud/x86_64/images/Fedora-Cloud-Base-Vagrant-libvirt-41-1.4.x86_64.vagrant.libvirt.box',
}

# This is a script to be used on Fedora 35 and newer installations where
# SELinux is enabled (at least to start) and requires the python bindings.
#
# If these packages are not installed, ansible will throw an error "Aborting,
# target uses selinux but python bindings (libselinux-python) aren't
# installed!"
$policycorescript = <<-SCRIPT
source /etc/os-release
if [ "${ID}" = "fedora" ] && [ "${VERSION_ID}" -ge 35 ]; then
  echo "Detected F35+, installing python selinux bindings needed by Ansible"
  sudo dnf --disablerepo=* --enablerepo=updates --enablerepo=fedora install -y python3-policycoreutils python3-libselinux
fi
SCRIPT

Vagrant.configure("2") do |config|
  config.vm.synced_folder '.', '/vagrant', disabled: true
  config.hostmanager.enabled = true
  config.hostmanager.manage_guest = true
  config.hostmanager.manage_host = true
  config.hostmanager.include_offline = true

  config.vm.define "infra" do |infra|
    infra.vm.hostname = "ossbunsen-infra"
    infra.vm.box = "fedora/#{os_settings['infra']}-cloud-base"
    if box_urls.key?(os_settings['infra'])
      infra.vm.box_url = box_urls[os_settings['infra']]
    end
    infra.vm.provider :libvirt do |libvirt|
      libvirt.memory = 2048
      libvirt.machine_virtual_size = 40
    end
  end
  config.vm.define "resource" do |resource|
    resource.vm.hostname = "ossbunsen-resource"
    resource.vm.box = "fedora/#{os_settings['resource']}-cloud-base"
    if box_urls.key?(os_settings['resource'])
      resource.vm.box_url = box_urls[os_settings['resource']]
    end
    resource.vm.provider :libvirt do |libvirt|
      libvirt.memory = 2048
      libvirt.machine_virtual_size = 40
    end
  end
  os_settings['farms'].each do |farm_os|
    (1..farms_count).each do |prov|
      config.vm.define "farm-fedora#{farm_os}-#{prov}" do |farm|
        farm.vm.hostname = "ossbunsen-farm-fedora#{farm_os}-#{prov}"
        farm.vm.box = "fedora/#{farm_os}-cloud-base"
        if box_urls.key?(farm_os)
          farm.vm.box_url = box_urls[farm_os]
        end
        farm.vm.provider :libvirt do |libvirt|
          libvirt.memory = 2048
          libvirt.machine_virtual_size = 40
          libvirt.storage :file, :size => '280G', :type => 'raw'
        end
      end
    end
  end
  config.vm.provision "shell", inline: $policycorescript
  config.vm.provision "shell", inline: <<-SHELL
    rootfs_device=$(df / | awk '$NF == "/" {print $1}')
    root_base_device=$(echo ${rootfs_device} | sed 's/[0-9]\\+$//')
    root_partition=$(echo ${rootfs_device} | sed "s|${root_base_device}||")
    growpart ${root_base_device} ${root_partition}
    btrfs filesystem resize max /
  SHELL
end
